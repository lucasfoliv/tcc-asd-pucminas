version: "3.9"

networks:
  gisa:
    name: gisa
    external: true

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: mcdcb
    restart: unless-stopped
    ports:
      - "2181:2181"
    networks:
      gisa:
        ipv4_address: 172.1.0.8
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    logging:
      driver: json-file
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: mcdmb
    restart: unless-stopped
    ports:
      - "9092:9092"
    networks:
      gisa:
        ipv4_address: 172.1.0.9
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
    healthcheck:
      test: [ "CMD", "kafka-topics", "--list", "--bootstrap-server", "${KAFKA_HOST}:${KAFKA_PORT}" ]
      interval: 30s
      timeout: 30s
      retries: 3
    logging:
      driver: json-file
    depends_on:
      - zookeeper
  receiver:
    image: receiver:latest
    container_name: receiver
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8084:8080"
    networks:
      gisa:
        ipv4_address: 172.1.0.10
    environment:
      KAFKA_HOST: ${KAFKA_HOST}
      KAFKA_PORT: ${KAFKA_PORT}
      JWT_SIGNATURE_SECRET: ${JWT_SIGNATURE_SECRET}
      SERVER_PORT: ${SERVER_PORT}
      LOG_LEVEL: ${LOG_LEVEL}
    logging:
      driver: json-file
    depends_on:
      kafka:
        condition: service_healthy
